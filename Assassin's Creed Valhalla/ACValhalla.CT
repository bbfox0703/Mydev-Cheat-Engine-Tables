<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>64</ID>
      <Description>"Compact mode"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
--https://forum.cheatengine.org/viewtopic.php?t=570055
LuaCall(function cycleFullCompact(sender,force) local state = not(compactmenuitem.Caption == 'Compact View Mode'); if force~=nil then state = not force end; compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'; getMainForm().Splitter1.Visible = state; getMainForm().Panel4.Visible    = state; getMainForm().Panel5.Visible    = state; end; function addCompactMenu() if compactmenualreadyexists then return end; local parent = getMainForm().Menu.Items; compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem); compactmenuitem.Caption = 'Compact View Mode'; compactmenuitem.OnClick = cycleFullCompact; compactmenualreadyexists = 'yes'; end; addCompactMenu(); cycleFullCompact(nil,true))

[DISABLE]
LuaCall(cycleFullCompact(nil,false))
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Inf. HP"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-09
  Author : bbfox @ https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_HP,ACValhalla.exe,8B 81 58 FE FF FF) // should be unique
alloc(newmem,$1000,INJECT_HP)

label(code)
label(return)
label(i_player_hp_addr)
label(is_inf_hp_on)

newmem:
  push rbx
  lea rbx, [rcx-000001A4]
  mov [i_player_hp_addr], rbx
  pop rbx

  cmp dword ptr [is_inf_hp_on], 1
  jne code
  mov eax, [rcx-000001A4]
  mov [rcx-000001A8], eax


code:
  mov eax,[rcx-000001A8]
  jmp return

align 10 cc
  i_player_hp_addr:
  dq 0
  is_inf_hp_on:
  dd 1

INJECT_HP:
  jmp newmem
  nop
return:
registersymbol(is_inf_hp_on)
registersymbol(i_player_hp_addr)
registersymbol(INJECT_HP)

[DISABLE]

INJECT_HP:
  db 8B 81 58 FE FF FF

unregistersymbol(*)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+2022330

ACValhalla.exe+202231C: CC                    - int 3
ACValhalla.exe+202231D: CC                    - int 3
ACValhalla.exe+202231E: CC                    - int 3
ACValhalla.exe+202231F: CC                    - int 3
ACValhalla.exe+2022320: 48 81 C1 30 FD FF FF  - add rcx,FFFFFFFFFFFFFD30
ACValhalla.exe+2022327: E9 04 86 F8 FF        - jmp ACValhalla.exe+1FAA930
ACValhalla.exe+202232C: CC                    - int 3
ACValhalla.exe+202232D: CC                    - int 3
ACValhalla.exe+202232E: CC                    - int 3
ACValhalla.exe+202232F: CC                    - int 3
// ---------- INJECTING HERE ----------
ACValhalla.exe+2022330: 8B 81 58 FE FF FF     - mov eax,[rcx-000001A8]
// ---------- DONE INJECTING  ----------
ACValhalla.exe+2022336: 89 02                 - mov [rdx],eax
ACValhalla.exe+2022338: 33 C0                 - xor eax,eax
ACValhalla.exe+202233A: C3                    - ret
ACValhalla.exe+202233B: CC                    - int 3
ACValhalla.exe+202233C: CC                    - int 3
ACValhalla.exe+202233D: CC                    - int 3
ACValhalla.exe+202233E: CC                    - int 3
ACValhalla.exe+202233F: CC                    - int 3
ACValhalla.exe+2022340: 48 81 C1 40 FE FF FF  - add rcx,FFFFFFFFFFFFFE40
ACValhalla.exe+2022347: E9 44 11 F8 FF        - jmp ACValhalla.exe+1FA3490
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Base. addr"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>808080</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>i_player_hp_addr</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"inf. HP on?"</Description>
          <DropDownList DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>is_inf_hp_on</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Cur. HP"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_player_hp_addr</Address>
          <Offsets>
            <Offset>-4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"Max HP"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_player_hp_addr</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Inf. Stamina"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-09
  Author : bbfox @ https://opencheattables.org
}

[ENABLE]

aobscanmodule(INJECT_INF_STAMINA,ACValhalla.exe,89 6B 38 48 8D 4B 10) // should be unique
alloc(newmem,$1000,INJECT_INF_STAMINA)

label(code)
label(return)
label(i_stam_base_addr)
label(is_inf_stam_on)

newmem:
  push rax
  lea rax, [rbx]
  mov [i_stam_base_addr], rax
  pop rax

  cmp dword ptr [is_inf_stam_on], 1
  jne code
  mov ebp, [rbx+3C]

code:
  mov [rbx+38],ebp
  lea rcx,[rbx+10]
  jmp return

align 10 cc
  i_stam_base_addr:
  dq 0
  is_inf_stam_on:
  dd 1

INJECT_INF_STAMINA:
  jmp newmem
  nop 2
return:
registersymbol(is_inf_stam_on)
registersymbol(i_stam_base_addr)
registersymbol(INJECT_INF_STAMINA)

[DISABLE]

INJECT_INF_STAMINA:
  db 89 6B 38 48 8D 4B 10

unregistersymbol(*)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+315D0A1

ACValhalla.exe+315D07C: 44 0F B6 72 18  - movzx r14d,byte ptr [rdx+18]
ACValhalla.exe+315D081: 39 7B 3C        - cmp [rbx+3C],edi
ACValhalla.exe+315D084: 74 11           - je ACValhalla.exe+315D097
ACValhalla.exe+315D086: BA A7 34 DC 41  - mov edx,41DC34A7
ACValhalla.exe+315D08B: 89 7B 3C        - mov [rbx+3C],edi
ACValhalla.exe+315D08E: 48 8D 4B 10     - lea rcx,[rbx+10]
ACValhalla.exe+315D092: E8 29 0B 4F FE  - call ACValhalla.exe+164DBC0
ACValhalla.exe+315D097: 39 6B 38        - cmp [rbx+38],ebp
ACValhalla.exe+315D09A: 74 11           - je ACValhalla.exe+315D0AD
ACValhalla.exe+315D09C: BA DD B0 AF C7  - mov edx,C7AFB0DD
// ---------- INJECTING HERE ----------
ACValhalla.exe+315D0A1: 89 6B 38        - mov [rbx+38],ebp
// ---------- DONE INJECTING  ----------
ACValhalla.exe+315D0A4: 48 8D 4B 10     - lea rcx,[rbx+10]
ACValhalla.exe+315D0A8: E8 13 0B 4F FE  - call ACValhalla.exe+164DBC0
ACValhalla.exe+315D0AD: 85 FF           - test edi,edi
ACValhalla.exe+315D0AF: 74 1C           - je ACValhalla.exe+315D0CD
ACValhalla.exe+315D0B1: 0F 57 C9        - xorps xmm1,xmm1
ACValhalla.exe+315D0B4: 0F 57 C0        - xorps xmm0,xmm0
ACValhalla.exe+315D0B7: F3 48 0F 2A CD  - cvtsi2ss xmm1,rbp
ACValhalla.exe+315D0BC: 48 8B CB        - mov rcx,rbx
ACValhalla.exe+315D0BF: F3 48 0F 2A C7  - cvtsi2ss xmm0,rdi
ACValhalla.exe+315D0C4: F3 0F 5E C8     - divss xmm1,xmm0
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16</ID>
          <Description>"Base addr."</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>808080</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>i_stam_base_addr</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"Enabled?"</Description>
          <DropDownList DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>is_inf_stam_on</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Cur. Sta."</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_stam_base_addr</Address>
          <Offsets>
            <Offset>38</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"Max. Sta."</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_stam_base_addr</Address>
          <Offsets>
            <Offset>3C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>100424</ID>
          <Description>"??"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>i_stam_base_addr</Address>
          <Offsets>
            <Offset>40</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>100425</ID>
          <Description>"??"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>i_stam_base_addr</Address>
          <Offsets>
            <Offset>44</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>100426</ID>
          <Description>"??"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>i_stam_base_addr</Address>
          <Offsets>
            <Offset>48</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Oxygen is enough"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-09
  Author : bbfox @ https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_INF_OXYGEN,ACValhalla.exe,F3 0F 5C C1 0F 2F C7 F3 0F 11 81) // should be unique
alloc(newmem,$1000,INJECT_INF_OXYGEN)

label(code)
label(return)

newmem:
  vmovss xmm0,[rcx+00000680]

code:
  //subss xmm0,xmm1
  comiss xmm0,xmm7
  jmp return

INJECT_INF_OXYGEN:
  jmp newmem
  nop 2
return:
registersymbol(INJECT_INF_OXYGEN)

[DISABLE]

INJECT_INF_OXYGEN:
  db F3 0F 5C C1 0F 2F C7

unregistersymbol(INJECT_INF_OXYGEN)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+399DDAB

ACValhalla.exe+399DD7B: EB 17                    - jmp ACValhalla.exe+399DD94
ACValhalla.exe+399DD7D: F3 0F 10 8F 80 06 00 00  - movss xmm1,[rdi+00000680]
ACValhalla.exe+399DD85: EB 0D                    - jmp ACValhalla.exe+399DD94
ACValhalla.exe+399DD87: F3 0F 10 8F 84 06 00 00  - movss xmm1,[rdi+00000684]
ACValhalla.exe+399DD8F: EB 03                    - jmp ACValhalla.exe+399DD94
ACValhalla.exe+399DD91: 0F 57 C9                 - xorps xmm1,xmm1
ACValhalla.exe+399DD94: F3 0F 11 8F 9C 06 00 00  - movss [rdi+0000069C],xmm1
ACValhalla.exe+399DD9C: 48 8B 47 38              - mov rax,[rdi+38]
ACValhalla.exe+399DDA0: 48 8B 08                 - mov rcx,[rax]
ACValhalla.exe+399DDA3: F3 0F 10 81 84 06 00 00  - movss xmm0,[rcx+00000684]
// ---------- INJECTING HERE ----------
ACValhalla.exe+399DDAB: F3 0F 5C C1              - subss xmm0,xmm1
// ---------- DONE INJECTING  ----------
ACValhalla.exe+399DDAF: 0F 2F C7                 - comiss xmm0,xmm7
ACValhalla.exe+399DDB2: F3 0F 11 81 84 06 00 00  - movss [rcx+00000684],xmm0
ACValhalla.exe+399DDBA: 73 54                    - jae ACValhalla.exe+399DE10
ACValhalla.exe+399DDBC: 89 B1 84 06 00 00        - mov [rcx+00000684],esi
ACValhalla.exe+399DDC2: 48 8B 87 E0 05 00 00     - mov rax,[rdi+000005E0]
ACValhalla.exe+399DDC9: 48 85 C0                 - test rax,rax
ACValhalla.exe+399DDCC: 74 05                    - je ACValhalla.exe+399DDD3
ACValhalla.exe+399DDCE: 48 8B 00                 - mov rax,[rax]
ACValhalla.exe+399DDD1: EB 03                    - jmp ACValhalla.exe+399DDD6
ACValhalla.exe+399DDD3: 48 8B C6                 - mov rax,rsi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>52</ID>
      <Description>"EXP multiplier / Charisma / Settlement EXP"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-09
  Author : bbfox @ https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_EXP_MULTI,ACValhalla.exe,41 89 81 54 01 00 00) // should be unique
alloc(newmem,$1000,INJECT_EXP_MULTI)
aobscanmodule(INJECT_READ_XP_ADDR,ACValhalla.exe,44 8B 88 54 01 00 00 EB 03 44) // should be unique
alloc(newmem2,$1000,INJECT_READ_XP_ADDR)

label(code)
label(return)
label(vf_exp_multi)
label(i_exp_base_addr)

newmem:
  mov [i_exp_base_addr], r9
  push rbx
  push rcx
  mov ebx, [r9+00000154]
  cmp ebx, eax
  jge endp
  push eax
  sub eax, ebx
  cvtsi2ss xmm15, eax
  vmovss xmm14, [vf_exp_multi]
  vmulss xmm15, xmm15, xmm14
  cvtss2si ecx, xmm15
  pop eax
  mov eax, ebx
  add eax, ecx
endp:
  pop rcx
  pop rbx

code:
  mov [r9+00000154],eax
  jmp return

align 10 cc
  vf_exp_multi:
  dd (float)1.5
  i_exp_base_addr:
  dq 0

INJECT_EXP_MULTI:
  jmp newmem
  nop 2
return:
registersymbol(vf_exp_multi)
registersymbol(i_exp_base_addr)
registersymbol(INJECT_EXP_MULTI)

label(code2)
label(return2)

newmem2:
  cmp dword ptr [i_exp_base_addr], 0
  jne code2
  mov [i_exp_base_addr], rax

code2:
  mov r9d,[rax+00000154]
  jmp return2

INJECT_READ_XP_ADDR:
  jmp newmem2
  nop 2
return2:
registersymbol(INJECT_READ_XP_ADDR)


[DISABLE]

INJECT_EXP_MULTI:
  db 41 89 81 54 01 00 00
INJECT_READ_XP_ADDR:
  db 44 8B 88 54 01 00 00
unregistersymbol(*)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+299D9FB

ACValhalla.exe+299D9D8: 41 8B D0                 - mov edx,r8d
ACValhalla.exe+299D9DB: 4C 8B 8C 24 80 00 00 00  - mov r9,[rsp+00000080]
ACValhalla.exe+299D9E3: 89 5C 24 64              - mov [rsp+64],ebx
ACValhalla.exe+299D9E7: 8D 4A 01                 - lea ecx,[rdx+01]
ACValhalla.exe+299D9EA: 89 4C 24 74              - mov [rsp+74],ecx
ACValhalla.exe+299D9EE: 8B F3                    - mov esi,ebx
ACValhalla.exe+299D9F0: 45 85 F6                 - test r14d,r14d
ACValhalla.exe+299D9F3: 74 10                    - je ACValhalla.exe+299DA05
ACValhalla.exe+299D9F5: 43 8D 04 3E              - lea eax,[r14+r15]
ACValhalla.exe+299D9F9: 8B F1                    - mov esi,ecx
// ---------- INJECTING HERE ----------
ACValhalla.exe+299D9FB: 41 89 81 54 01 00 00     - mov [r9+00000154],eax
// ---------- DONE INJECTING  ----------
ACValhalla.exe+299DA02: 41 2B F3                 - sub esi,r11d
ACValhalla.exe+299DA05: 89 5C 24 70              - mov [rsp+70],ebx
ACValhalla.exe+299DA09: 8B EB                    - mov ebp,ebx
ACValhalla.exe+299DA0B: 0F 57 FF                 - xorps xmm7,xmm7
ACValhalla.exe+299DA0E: 0F 57 F6                 - xorps xmm6,xmm6
ACValhalla.exe+299DA11: 85 FF                    - test edi,edi
ACValhalla.exe+299DA13: 0F 84 9A 00 00 00        - je ACValhalla.exe+299DAB3
ACValhalla.exe+299DA19: 41 8B 89 5C 01 00 00     - mov ecx,[r9+0000015C]
ACValhalla.exe+299DA20: 33 D2                    - xor edx,edx
ACValhalla.exe+299DA22: 41 8B 81 58 01 00 00     - mov eax,[r9+00000158]
}

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+29A2DEC

ACValhalla.exe+29A2DCB: 4C 8B C3              - mov r8,rbx
ACValhalla.exe+29A2DCE: E8 0D 44 6D FF        - call ACValhalla.exe+20771E0
ACValhalla.exe+29A2DD3: 8B 53 08              - mov edx,[rbx+08]
ACValhalla.exe+29A2DD6: 33 C9                 - xor ecx,ecx
ACValhalla.exe+29A2DD8: 81 E2 FF 7F 00 00     - and edx,00007FFF
ACValhalla.exe+29A2DDE: C1 E2 03              - shl edx,03
ACValhalla.exe+29A2DE1: 48 03 13              - add rdx,[rbx]
ACValhalla.exe+29A2DE4: 48 3B C2              - cmp rax,rdx
ACValhalla.exe+29A2DE7: 74 0C                 - je ACValhalla.exe+29A2DF5
ACValhalla.exe+29A2DE9: 48 8B 00              - mov rax,[rax]
// ---------- INJECTING HERE ----------
ACValhalla.exe+29A2DEC: 44 8B 88 54 01 00 00  - mov r9d,[rax+00000154]
// ---------- DONE INJECTING  ----------
ACValhalla.exe+29A2DF3: EB 03                 - jmp ACValhalla.exe+29A2DF8
ACValhalla.exe+29A2DF5: 44 8B C9              - mov r9d,ecx
ACValhalla.exe+29A2DF8: 44 8B 47 18           - mov r8d,[rdi+18]
ACValhalla.exe+29A2DFC: 41 81 E0 FF 7F 00 00  - and r8d,00007FFF
ACValhalla.exe+29A2E03: 75 0E                 - jne ACValhalla.exe+29A2E13
ACValhalla.exe+29A2E05: 8D 41 01              - lea eax,[rcx+01]
ACValhalla.exe+29A2E08: 48 8B 5C 24 30        - mov rbx,[rsp+30]
ACValhalla.exe+29A2E0D: 48 83 C4 20           - add rsp,20
ACValhalla.exe+29A2E11: 5F                    - pop rdi
ACValhalla.exe+29A2E12: C3                    - ret
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>100412</ID>
          <Description>"Re-enable when load from save"</Description>
          <Color>400080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>54</ID>
          <Description>"Base addr."</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>808080</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>i_exp_base_addr</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>53</ID>
          <Description>"XP multiplier"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>vf_exp_multi</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>58</ID>
          <Description>"XP"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_exp_base_addr</Address>
          <Offsets>
            <Offset>154</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>56</ID>
          <Description>"Settlement EXP"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_exp_base_addr</Address>
          <Offsets>
            <Offset>160</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>57</ID>
          <Description>"Charisma? (zero based, 0=LV1)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_exp_base_addr</Address>
          <Offsets>
            <Offset>164</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>63</ID>
          <Description>"_wip"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>100410</ID>
              <Description>"?? 140"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>i_exp_base_addr</Address>
              <Offsets>
                <Offset>140</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>55</ID>
              <Description>"Time counter for ?"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>i_exp_base_addr</Address>
              <Offsets>
                <Offset>148</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>100411</ID>
              <Description>"?? 138"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>i_exp_base_addr</Address>
              <Offsets>
                <Offset>138</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>59</ID>
              <Description>"?? 13C"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>i_exp_base_addr</Address>
              <Offsets>
                <Offset>13C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>62</ID>
              <Description>"?? 16C"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>i_exp_base_addr</Address>
              <Offsets>
                <Offset>16C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>61</ID>
              <Description>"?? 168"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>i_exp_base_addr</Address>
              <Offsets>
                <Offset>168</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>42</ID>
      <Description>"Vendor inf. stock"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-09
  Author : bbfox @ https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_VENDOR_INF_STOCK,ACValhalla.exe,44 2B C7 80 7C 24 78 00) // should be unique
alloc(newmem,$1000,INJECT_VENDOR_INF_STOCK)

label(code)
label(return)

newmem:

code:
  //sub r8d,edi
  cmp byte ptr [rsp+78],00
  jmp return

INJECT_VENDOR_INF_STOCK:
  jmp newmem
  nop 3
return:
registersymbol(INJECT_VENDOR_INF_STOCK)

[DISABLE]

INJECT_VENDOR_INF_STOCK:
  db 44 2B C7 80 7C 24 78 00

unregistersymbol(INJECT_VENDOR_INF_STOCK)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+255A196

ACValhalla.exe+255A180: 5F              - pop rdi
ACValhalla.exe+255A181: 5E              - pop rsi
ACValhalla.exe+255A182: 5D              - pop rbp
ACValhalla.exe+255A183: C3              - ret
ACValhalla.exe+255A184: 48 85 DB        - test rbx,rbx
ACValhalla.exe+255A187: 74 E4           - je ACValhalla.exe+255A16D
ACValhalla.exe+255A189: 44 8B 03        - mov r8d,[rbx]
ACValhalla.exe+255A18C: 45 3B E8        - cmp r13d,r8d
ACValhalla.exe+255A18F: 41 8B F8        - mov edi,r8d
ACValhalla.exe+255A192: 41 0F 46 FD     - cmovbe edi,r13d
// ---------- INJECTING HERE ----------
ACValhalla.exe+255A196: 44 2B C7        - sub r8d,edi
// ---------- DONE INJECTING  ----------
ACValhalla.exe+255A199: 80 7C 24 78 00  - cmp byte ptr [rsp+78],00
ACValhalla.exe+255A19E: 44 89 03        - mov [rbx],r8d
ACValhalla.exe+255A1A1: 74 10           - je ACValhalla.exe+255A1B3
ACValhalla.exe+255A1A3: 45 85 C0        - test r8d,r8d
ACValhalla.exe+255A1A6: 75 0B           - jne ACValhalla.exe+255A1B3
ACValhalla.exe+255A1A8: 41 8B D6        - mov edx,r14d
ACValhalla.exe+255A1AB: 49 8B CC        - mov rcx,r12
ACValhalla.exe+255A1AE: E8 9D 05 00 00  - call ACValhalla.exe+255A750
ACValhalla.exe+255A1B3: 8B C7           - mov eax,edi
ACValhalla.exe+255A1B5: EB B8           - jmp ACValhalla.exe+255A16F
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>100053</ID>
      <Description>"Refill stackable items (must &gt;= threshold, to apply: open item menu)"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-10
  Author : bbfox @ https://opencheattables.com
}

[ENABLE]
aobscanmodule(INJECT_REFILL_ITEM,ACValhalla.exe,8B 02 48 8B DA 89 01 48 8B F9 48 83 C1 08 48 83 C2 08 E8 ?? ?? ?? ?? 48 8B 43 40)
alloc(newmem,$1000,INJECT_REFILL_ITEM)

label(code)
label(return)
label(is_refill_enabled)
label(i_min_refill_cnt)
label(i_refill_threshold)

newmem:
  cmp dword ptr [is_refill_enabled], 1
  jne code
  mov eax,[rdx]
  cmp eax, [i_refill_threshold]
  jb code
  cmp eax, [i_min_refill_cnt]
  ja code
  mov eax, [i_min_refill_cnt]
  mov [rdx], eax

code:
  mov eax,[rdx]
  mov rbx,rdx
  jmp return

align 10 cc
  i_min_refill_cnt:
  dd #1234
  i_refill_threshold:
  dd 8
  is_refill_enabled:
  dd 1

INJECT_REFILL_ITEM:
  jmp newmem
return:

registersymbol(i_refill_threshold)
registersymbol(is_refill_enabled)
registersymbol(i_min_refill_cnt)
registersymbol(INJECT_REFILL_ITEM)

[DISABLE]

INJECT_REFILL_ITEM:
  db 8B 02 48 8B DA

unregistersymbol(*)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+208589A

ACValhalla.exe+2085889: CC              - int 3
ACValhalla.exe+208588A: CC              - int 3
ACValhalla.exe+208588B: CC              - int 3
ACValhalla.exe+208588C: CC              - int 3
ACValhalla.exe+208588D: CC              - int 3
ACValhalla.exe+208588E: CC              - int 3
ACValhalla.exe+208588F: CC              - int 3
ACValhalla.exe+2085890: 48 89 5C 24 08  - mov [rsp+08],rbx
ACValhalla.exe+2085895: 57              - push rdi
ACValhalla.exe+2085896: 48 83 EC 20     - sub rsp,20
// ---------- INJECTING HERE ----------
ACValhalla.exe+208589A: 8B 02           - mov eax,[rdx]
// ---------- DONE INJECTING  ----------
ACValhalla.exe+208589C: 48 8B DA        - mov rbx,rdx
ACValhalla.exe+208589F: 89 01           - mov [rcx],eax
ACValhalla.exe+20858A1: 48 8B F9        - mov rdi,rcx
ACValhalla.exe+20858A4: 48 83 C1 08     - add rcx,08
ACValhalla.exe+20858A8: 48 83 C2 08     - add rdx,08
ACValhalla.exe+20858AC: E8 EF A4 44 00  - call ACValhalla.exe+24CFDA0
ACValhalla.exe+20858B1: 48 8B 43 40     - mov rax,[rbx+40]
ACValhalla.exe+20858B5: 48 8B 5C 24 30  - mov rbx,[rsp+30]
ACValhalla.exe+20858BA: 48 89 47 40     - mov [rdi+40],rax
ACValhalla.exe+20858BE: 48 8B C7        - mov rax,rdi
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>100413</ID>
          <Description>"Affects quest items"</Description>
          <Color>400080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>100054</ID>
          <Description>"Enabled?"</Description>
          <DropDownList DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>is_refill_enabled</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>100409</ID>
          <Description>"Threshold (must &gt;= this value)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_refill_threshold</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>100055</ID>
          <Description>"Min. count"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_min_refill_cnt</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"Skill &amp; mastery pt (Update: open skill tab)"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-09
  Author : bbfox @ https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_SKILL_MASTERY_PT,ACValhalla.exe,8B 41 18 8B 51 1C 39) // should be unique
alloc(newmem,$1000,INJECT_SKILL_MASTERY_PT)

label(code)
label(return)
label(i_base_skill_pt_addr)

newmem:
  mov [i_base_skill_pt_addr], rcx

code:
  mov eax,[rcx+18]
  mov edx,[rcx+1C]
  jmp return

align 10 cc
  i_base_skill_pt_addr:
  dq 0

INJECT_SKILL_MASTERY_PT:
  jmp newmem
  nop
return:
registersymbol(i_base_skill_pt_addr)
registersymbol(INJECT_SKILL_MASTERY_PT)

[DISABLE]

INJECT_SKILL_MASTERY_PT:
  db 8B 41 18 8B 51 1C

unregistersymbol(*)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+1E6F10F0

ACValhalla.exe+1E6F10C3: 50                       - push rax
ACValhalla.exe+1E6F10C4: 48 8D 44 24 08           - lea rax,[rsp+08]
ACValhalla.exe+1E6F10C9: 48 8D 80 6F 6B 0F A2     - lea rax,[rax-5DF09491]
ACValhalla.exe+1E6F10D0: 48 8B 88 91 94 F0 5D     - mov rcx,[rax+5DF09491]
ACValhalla.exe+1E6F10D7: 58                       - pop rax
ACValhalla.exe+1E6F10D8: 4C 89 0C 24              - mov [rsp],r9
ACValhalla.exe+1E6F10DC: 4C 8D 0D 94 41 6D F5     - lea r9,[ACValhalla.exe+13DC5277]
ACValhalla.exe+1E6F10E3: 4C 87 0C 24              - xchg [rsp],r9
ACValhalla.exe+1E6F10E7: C3                       - ret
ACValhalla.exe+1E6F10E8: 0F 1F 84 00 00 00 00 00  - nop dword ptr [rax+rax+00000000]
// ---------- INJECTING HERE ----------
ACValhalla.exe+1E6F10F0: 8B 41 18                 - mov eax,[rcx+18]
// ---------- DONE INJECTING  ----------
ACValhalla.exe+1E6F10F3: 8B 51 1C                 - mov edx,[rcx+1C]
ACValhalla.exe+1E6F10F6: 39 D0                    - cmp eax,edx
ACValhalla.exe+1E6F10F8: 73 03                    - jae ACValhalla.exe+1E6F10FD
ACValhalla.exe+1E6F10FA: 31 C0                    - xor eax,eax
ACValhalla.exe+1E6F10FC: C3                       - ret
ACValhalla.exe+1E6F10FD: 29 D0                    - sub eax,edx
ACValhalla.exe+1E6F10FF: C3                       - ret
ACValhalla.exe+1E6F1100: 0F 84 97 00 00 00        - je ACValhalla.exe+1E6F119D
ACValhalla.exe+1E6F1106: B8 00 00 00 00           - mov eax,00000000
ACValhalla.exe+1E6F110B: 51                       - push rcx
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>32</ID>
          <Description>"Base addr."</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>808080</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>i_base_skill_pt_addr</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"Total skill pt"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_base_skill_pt_addr</Address>
          <Offsets>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"Power (skill pt used, power = used+1)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_base_skill_pt_addr</Address>
          <Offsets>
            <Offset>14</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>35</ID>
          <Description>"Total Mastery pt?"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_base_skill_pt_addr</Address>
          <Offsets>
            <Offset>18</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>36</ID>
          <Description>"Mastery pt used?"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_base_skill_pt_addr</Address>
          <Offsets>
            <Offset>1c</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>100422</ID>
      <Description>"Inf. Adrenalin"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-10
  Author : bbfox @ https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_INF_ADRE,ACValhalla.exe,8B 81 F0 FE FF FF 89) // should be unique
alloc(newmem,$1000,INJECT_INF_ADRE)

label(code)
label(return)

newmem:
  mov eax,[rcx-00000110]
  cmp eax,[rcx-00000110+4]
  je code
  mov eax,[rcx-00000110+4]
  mov [rcx-00000110], eax

code:
  //mov eax,[rcx-00000110]
  jmp return

INJECT_INF_ADE:
  jmp newmem
  nop
return:
registersymbol(INJECT_INF_ADRE)

[DISABLE]

INJECT_INF_ADE:
  db 8B 81 F0 FE FF FF

unregistersymbol(INJECT_INF_ADRE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+20F1710

ACValhalla.exe+20F1705: 33 C0              - xor eax,eax
ACValhalla.exe+20F1707: C3                 - ret
ACValhalla.exe+20F1708: CC                 - int 3
ACValhalla.exe+20F1709: CC                 - int 3
ACValhalla.exe+20F170A: CC                 - int 3
ACValhalla.exe+20F170B: CC                 - int 3
ACValhalla.exe+20F170C: CC                 - int 3
ACValhalla.exe+20F170D: CC                 - int 3
ACValhalla.exe+20F170E: CC                 - int 3
ACValhalla.exe+20F170F: CC                 - int 3
// ---------- INJECTING HERE ----------
ACValhalla.exe+20F1710: 8B 81 F0 FE FF FF  - mov eax,[rcx-00000110]
// ---------- DONE INJECTING  ----------
ACValhalla.exe+20F1716: 89 02              - mov [rdx],eax
ACValhalla.exe+20F1718: 33 C0              - xor eax,eax
ACValhalla.exe+20F171A: C3                 - ret
ACValhalla.exe+20F171B: CC                 - int 3
ACValhalla.exe+20F171C: CC                 - int 3
ACValhalla.exe+20F171D: CC                 - int 3
ACValhalla.exe+20F171E: CC                 - int 3
ACValhalla.exe+20F171F: CC                 - int 3
ACValhalla.exe+20F1720: 8B 81 68 FE FF FF  - mov eax,[rcx-00000198]
ACValhalla.exe+20F1726: 89 02              - mov [rdx],eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>46</ID>
      <Description>"Adrenalin -- need to conform (re-enable after load save)"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-09
  Author : bbfox @ https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_INF_ADRENALIN,ACValhalla.exe,8B 81 F8 FE FF FF) // should be unique
alloc(newmem,$1000,INJECT_INF_ADRENALIN)

label(code)
label(return)
label(i_base_ade_addr)

newmem:
  push rax
  lea rax, [rcx-00000108]
  mov [i_base_ade_addr], rax
  pop rax

code:
  mov eax,[rcx-00000108]
  jmp return

align 10 cc
  i_base_ade_addr:
  dq 0

INJECT_INF_ADRENALIN:
  jmp newmem
  nop
return:
registersymbol(i_base_ade_addr)
registersymbol(INJECT_INF_ADRENALIN)

[DISABLE]

INJECT_INF_ADRENALIN:
  db 8B 81 F8 FE FF FF

unregistersymbol(*)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.exe+20F1A10

ACValhalla.exe+20F1A06: CC                    - int 3
ACValhalla.exe+20F1A07: CC                    - int 3
ACValhalla.exe+20F1A08: CC                    - int 3
ACValhalla.exe+20F1A09: CC                    - int 3
ACValhalla.exe+20F1A0A: CC                    - int 3
ACValhalla.exe+20F1A0B: CC                    - int 3
ACValhalla.exe+20F1A0C: CC                    - int 3
ACValhalla.exe+20F1A0D: CC                    - int 3
ACValhalla.exe+20F1A0E: CC                    - int 3
ACValhalla.exe+20F1A0F: CC                    - int 3
// ---------- INJECTING HERE ----------
ACValhalla.exe+20F1A10: 8B 81 F8 FE FF FF     - mov eax,[rcx-00000108]
// ---------- DONE INJECTING  ----------
ACValhalla.exe+20F1A16: 89 02                 - mov [rdx],eax
ACValhalla.exe+20F1A18: 33 C0                 - xor eax,eax
ACValhalla.exe+20F1A1A: C3                    - ret
ACValhalla.exe+20F1A1B: CC                    - int 3
ACValhalla.exe+20F1A1C: CC                    - int 3
ACValhalla.exe+20F1A1D: CC                    - int 3
ACValhalla.exe+20F1A1E: CC                    - int 3
ACValhalla.exe+20F1A1F: CC                    - int 3
ACValhalla.exe+20F1A20: 48 83 EC 28           - sub rsp,28
ACValhalla.exe+20F1A24: 48 81 C1 B0 FB FF FF  - add rcx,FFFFFFFFFFFFFBB0
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>47</ID>
          <Description>"Base addr."</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>808080</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>i_base_ade_addr</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>100408</ID>
          <Description>"Cur"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_base_ade_addr</Address>
          <Offsets>
            <Offset>-8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>49</ID>
          <Description>"Max"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_base_ade_addr</Address>
          <Offsets>
            <Offset>-4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>48</ID>
          <Description>"?"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_base_ade_addr</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>50</ID>
          <Description>"?"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>i_base_ade_addr</Address>
          <Offsets>
            <Offset>4</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>100417</ID>
      <Description>"Loc?"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACValhalla.exe
  Version: 
  Date   : 2022-04-10
  Author : bbfox @ https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_LOC_INFO,ACValhalla.exe,41 0F 11 10 F3 41 0F 10 9D 8C 00 00 00) // should be unique
alloc(newmem,$1000,INJECT_LOC_INFO)

label(code)
label(return)
label(vf_loc_x)
label(vf_loc_y)
label(vf_loc_z)
label(i_loc_base_addr)

newmem:


code:
  movups [r8],xmm2

  // inject start
  mov [i_loc_base_addr], r8
  vmovss xmm15, [r8]
  vmovss [vf_loc_x], xmm15
  vmovss xmm15, [r8+4]
  vmovss [vf_loc_y], xmm15
  vmovss xmm15, [r8+8]
  vmovss [vf_loc_z], xmm15

@@:
  // inject end

  movss xmm3,[r13+0000008C]
  jmp return

align 10 cc
  i_loc_base_addr:
  dq 0
  vf_loc_x:
  dd 0
  vf_loc_y:
  dd 0
  vf_loc_z:
  dd 0


  //1816.628662, 9.509561539, 201

INJECT_LOC_INFO:
  jmp newmem
  nop 8
return:

registersymbol(i_loc_base_addr)
registersymbol(vf_loc_x)
registersymbol(vf_loc_y)
registersymbol(vf_loc_z)
registersymbol(INJECT_LOC_INFO)

[DISABLE]

INJECT_LOC_INFO:
  db 41 0F 11 10 F3 41 0F 10 9D 8C 00 00 00

unregistersymbol(*)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ACValhalla.AK::WriteBytesMem::Clear+6E29

ACValhalla.AK::WriteBytesMem::Clear+6DF7: EB 04                          - jmp ACValhalla.AK::WriteBytesMem::Clear+6DFD
ACValhalla.AK::WriteBytesMem::Clear+6DF9: 48 83 C0 20                    - add rax,20
ACValhalla.AK::WriteBytesMem::Clear+6DFD: 0F 10 50 30                    - movups xmm2,[rax+30]
ACValhalla.AK::WriteBytesMem::Clear+6E01: 4D 8D 87 10 02 00 00           - lea r8,[r15+00000210]
ACValhalla.AK::WriteBytesMem::Clear+6E08: 48 8B D6                       - mov rdx,rsi
ACValhalla.AK::WriteBytesMem::Clear+6E0B: 0F 28 05 CE E8 83 01           - movaps xmm0,[ACValhalla.exe+44DCDF0]
ACValhalla.AK::WriteBytesMem::Clear+6E12: 48 8D 8D 00 01 00 00           - lea rcx,[rbp+00000100]
ACValhalla.AK::WriteBytesMem::Clear+6E19: 0F 57 C9                       - xorps xmm1,xmm1
ACValhalla.AK::WriteBytesMem::Clear+6E1C: C7 44 24 20 01 00 00 00        - mov [rsp+20],00000001
ACValhalla.AK::WriteBytesMem::Clear+6E24: 66 0F 38 14 D1                 - blendvps xmm2,xmm1,xmm0
// ---------- INJECTING HERE ----------
ACValhalla.AK::WriteBytesMem::Clear+6E29: 41 0F 11 10                    - movups [r8],xmm2
// ---------- DONE INJECTING  ----------
ACValhalla.AK::WriteBytesMem::Clear+6E2D: F3 41 0F 10 9D 8C 00 00 00     - movss xmm3,[r13+0000008C]
ACValhalla.AK::WriteBytesMem::Clear+6E36: E8 E5 21 0E 00                 - call ACValhalla.exe+2D80730
ACValhalla.AK::WriteBytesMem::Clear+6E3B: 48 8D 54 24 50                 - lea rdx,[rsp+50]
ACValhalla.AK::WriteBytesMem::Clear+6E40: 48 8D 8D 00 01 00 00           - lea rcx,[rbp+00000100]
ACValhalla.AK::WriteBytesMem::Clear+6E47: E8 54 C0 11 00                 - call ACValhalla.exe+2DBA5B0
ACValhalla.AK::WriteBytesMem::Clear+6E4C: 48 8D 95 B0 00 00 00           - lea rdx,[rbp+000000B0]
ACValhalla.AK::WriteBytesMem::Clear+6E53: 48 8D 8D 00 01 00 00           - lea rcx,[rbp+00000100]
ACValhalla.AK::WriteBytesMem::Clear+6E5A: E8 B1 C0 11 00                 - call ACValhalla.exe+2DBA620
ACValhalla.AK::WriteBytesMem::Clear+6E5F: 48 BE AB AA AA AA AA AA AA AA  - mov rsi,AAAAAAAAAAAAAAAB
ACValhalla.AK::WriteBytesMem::Clear+6E69: 4C 89 B4 24 70 0A 00 00        - mov [rsp+00000A70],r14
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>100421</ID>
          <Description>"Base addr."</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>808080</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>i_loc_base_addr</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>100418</ID>
          <Description>"X"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>vf_loc_x</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>100419</ID>
          <Description>"Y"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>vf_loc_y</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>100420</ID>
          <Description>"Z"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>vf_loc_z</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>100423</ID>
      <Description>"Assassin's Creed Valhalla 1.5.3  /  https://opencheattables.com  /  CE 7.4+"</Description>
      <Color>400080</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
