<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="46">
  <Files>
    <File Name="a17_win2borderless.ps1" Encoding="Ascii85">y.$o^8(=,ZXG=tBKj6wB*z.dMLm#@$suahVU?ZX*yLH,qLSy?4k2.:lXYMRUyOkId3Ir)GG)aANELk9w1k!A{3M7R5G2/EApZYKCnYm,o^NSPVVSzm{K9Aoy[uSvP$HhN:?Ifa@Bu0h(#S9?isps4_A(2;71}Y@)2?XrXq;${!bT}SZ^^5!5xS{mi;P!2-9L^S}N[qQ+R)M%a+2-JUrJa=@]kFSgsoh#AZNKPn/QS33B3Fk4!RwktM3zrq=?DrvBn;iI925FjK7}F+(Jf4uS,NhK?t7cf=L=;)Ro;h!=/^B(ho!:6*Fja1a2s%p_J/0ALB4a$]M-;ev3z$z5K}wL)2[4Fok!kgXU,gGkPH@%EFY_X/peuMeC#N4xh]Yk4droCCal0m1ddIPyOEd2$T@I(0;M!;(Eu34c@R.Fg7l@F9GG^y)LZSTohZboIabQh,qlRQ=ClpMf{F7oMp9B[a_DU[8/]ccga9MLRl[J{T1G?b35?JGkRT%J$;)e{9N^n^VI/1DX;U}EI02HBMzEk,13wr^W+9z:5led77;Krp+XZ6GO,vAtpe%{+C!b4LY-7cGRLw)ie@,0g**#M.HeR/1;$?A{sh9fdv(!m3c{vkAy),KIM{#pfN+T.=rQPMy)q=(kxAb/.D2xU*]pmMG4RxZ;21xnoTt%4!d(M]K#r-+be!BQ)qcZVdc%nb{S-+4e%i.Y$Dhv9]CIngDS!/P4l@.{PPc0m%h3D$zjyk!bPR@*;,uGhEK(mSD*WV#qJXMwF;V#rFoP20V7G9}7halMqPgRao/q=Qm$$/w=A%oi9eQHa4HwBqi6*.@.3pY+id,jr+KU,7Uy.LXH*Jb?swc%P)l]U.!7E)#CRb@3C^.euYs(eDE(MbY$d6slIzNO=.KAhF2Hc?n3A}??V4W1IlBwwE)W,hZS]mXr*UFpttdF]:wuvC6IUEaRg.RvKs-q/*e?CGCaXA_7G!3S,kP#:*9)$SC9RO$W:1R^Y+7-]dQfe}%=E=O^U$:Ghx-i6jjz8KDvcF%]pp0HW$3-bhvLN1EMzq3g!T]+7;!Z_qs$wDT)RY6!pWBWRVIh/w*MhQXSfPdty6.ebLk{j_vAtK7e]IHA*H)bP@Y/JC%N!-007tZDck,[@PtiVUzz7*qfJqT8BfRRW?6oG_4LqwFZ2L(@X2w%Xxb;$1lL}vhk0VffLzy}A%i#%d@f]CkGoZN@mYPOC]GRpzEBQ94H@O%bK6)%1PAZ2F*ZpU(;#6%YP9)08Peqp$P/ocWkYGl$lWh_uc5?haF?XhIUHKiI58(CRVKKVYGKAZorL[L1NN-T73djj8oJx[IQc;z]GeL(#TjcaEvP=%5QJiShh4PsO5[eXX4EU11+80NavQWFuRwtLRF3G=8K1V%xPV!KK_zN8.XD_g9p50Z?wxsPMgQX{+#CkQ-HtGS:z10(JcmjfZd;plPJg.PXBS8KxE^+#2])UD6-!?Z$l5cTK%^:fQ-+C]soKqM9)8nje]XHkjuhl79X8xC9vSz7+((!82$IuaZRhX!Mz-pe(bzrPz4)J]84N}7[{$l%bGp*YDm-4^-mkA{ah$*7){-V7$#9}itG;b10vPjyWz,CLPJhX.Fy.,D=GC,46)KG-]F8.TghmK:0Q:SAd:0BgoFqHOiDnTOhwIc/KqxIdvy%#}jKSYCgqElfbK*OPRccaGW{:^wO](hH)Lu2JCQ6fOLIIBIej/gU=+zuwdH6=8RwN7Wvzm3Q9JHfjtOGb]npS$%dwU!A2Wiu,so(SU-2W,R+}47[SmELf+}?Xt-.d*={b*-cjV[g/I9zts%^Ko+y@qZR56T6=1)L!:)K.mp;,eGTmiqT{)HtNW8r-PYhkal!M323G{:toO3_wJ+rzm=TSJn*oLgl8JXv:D0dmnhJ[lzx!OfwWTdSFK@93;L5_Y^X2H[mcaZ$Wom(MFa^l*ub4msaKY$.ziC{ybJVFv)cEavK-[No]J.:DGd:B!z!a}G)guvWMi}x96)hFUBW;m/=Py,8R]uP-v:nM)OfRZR1]8WHrGvxL;-nmvbsp6Ib+L;qwfAMzT2}#8dSLbrUMnn5Q]MS-:P,hc@a%T51g13!oB)tCe7,CODcM__)+JJhYpZmsY[l7TA,gDFHG{pOGSxw+z6WJY-5%6x(*Hnar3ZW3;.e=BRVCa1)GC}2,w:MlKWi[R:xw#G;FGL3#[2A#+Q;36wmS9LWvk7]-DowG_MhmQ(ScxH#dmu!uGvF[)l0%EQ?OWMDcsc8zk_t0-?aFY!S2{(h,6ypK7DS1gB?Ch*fm1vVHCSJ!3zYr;L[Y0(wYY}*#6SPskgKia*]c9vOV:sTC!tb:}^MLI%GW_@[6N}yW][(F!ifLvewyShht}xpQh:G+T#Qs$^OgbD1de[:HqONWNaMWFvt0#rVMzDh-^V-$LT#B@Z{gYGj$uR@/y?jA?6C9D%V4xV;gY$V7V%O/nnuv9}mLN0^+@PescTxY#Im2w#jUu6R;Cg+@{aF49cGWmg9+x0SDd2?9PJV,N!kSsthBc1o%J[jDf}aR/*nx(=s}/3IJt:ltEhGB5d(f?ys^I!dgl;oMcB=oU$ffqY%vmI8C-cj+t!S#!mzWG5.R</File>
    <File Name="a17_win2borderless_psv5.ps1" Encoding="Ascii85">wODOW8]%{!(q#dgAGjh(Ypb@7rQ20S,A5AQ!748n[SQ,G2#xKFJ=ePIJ9DQPwUMw18wgO,Y:FEFDA[/+2,)YH6%z;g8T_p^nXy0ZU,9@,/MG(rkS4np!t-*opL6bc=*86v@}opaP$DrZ/S%9j$w{Sk(kH%sCo]BKgh[B%?,F0Ads{/k?6WZjA@3#(G^.JrZh9BXU=e3*Hb./%zmi!IONhWToX1I-umX;A0;;uD5fM-VqhXvC2#(I89.c8XqD$jBMv^EgR*oWhgpnxorioF3/AgDmPa{vR%kU_}Ml!=jX@dE6]Hy1a4b@-[sH,Ai-e=jMLP1#,F.BjfuxKP;sFq8,,S09]jvmrmZTD$q;ZP^wyt+/]+)_7QuPW/v]tFjxxKY^K*!+#t#n,9dwdo{+0cD}^jZ{7KtA$xmEFW%@OS9VCt?7d1;csc)M0?mucJIJ.[Yr_;%Nr18WqZ^(rWC$W3VTZNKq;AkliSMVvNAcX6z^5gYv5TaJWz[WN={JS;=.!m;+3@ML$dfvnLGl=M(C-_SShT5xRoC}+Z}mKy?%A6]gRH,QVL,Ys1$FT.ty.PwCC$*G%uCORb;,X(p1L@RtlTy)-{a6UMqzKrSNa1u(5MnejGUG^%8OM-;7mlqfTw0:)t31**!}[lrSdwdId2nq4M$9/u]Bjds}((C,fjs/;jr*+6sGTKq{;pje_+VK$37a!Ho_xS$v]i;I1OQkH4d*@oKVQhy*@Gq}3a=EtVYiE[TqAWXb4cYVShpBj2#h6E:%_VV,:7$VIXEH#Ui-lSE?UPcGD(AtxsQ9,c#aGFd[VoxXCsPGJtG8G:zl5I9*Ea?I.IA[[=t[;2$^W#W9wgRC1a!iY?PZTm4k+LpZEoXrU$adpUm]ER.;DUR##81=FBBoY!uSkr$%M3k]y1v88YFW{y}?(#lfxUaVaClQ9g7i5J,9/e,?moW)%2@lqLj4nz/K.n_jaw!Z!:4;(KsmKp7]Jez$et6*^0I!Ld$Rgj31^hJwFkC:#eaXWpV$wKeRM(S2.5.+/X3Skp[)K{TlU_umehB;U:RYh[kAG$+7RI[0*t=8e6J1,gK$Uv$7x.8zLCva#]4rC6;)tmFHpPDVs4l-xRKH+tW=gJ)B7$[^LNso_JoqAkQBb3=U7:rB:}vRiE..T(vT-5za!gwKdAi41k9777U_4?i$#oh(wP[@q5{{($^+h=xYJUho?qYHjg*;A$S8U-f_GR_a)UD6-!#$y45cTK%^?=kH(lwuQKqM9)8nje]?1qjy3kUzyI}+7YSz7,j-$N@OWhB?i4h[aaJ)q1ozrX8rMYC,tcx1%%73;QPUJmtGnq6mWMf-.0?$g^JP}6h[^GB28#Rq#vVnY![xS?XM(m.Ziq5k6wiyfbRtF7KqUvH_Vl1Xc*T8s^i1g{Jc!:aD}=+-FTxpYYF070tz(%w=a7OvVBK5Mm5-MMdDxY6F$aS=eVF#KZ}QMM;}]my=KR-IcamnPJSS@d;[mG#H!]}+/Gx[e*^cU.,A)zlnZ;#OSYhI)gS-,IyB*_sp@NKEL3g$TYoLL8fC#a/Y_cuWxg3Jl(k3Z#.v3$,inq8tXfYjlNP?9zE!P[{bhpgvlyY];+?fuD{%*am8Q@o%w$p^;l(7_NwhZTpF}w$T({1_Bde0jyIp_8*}tT)])QXYd1Zb/$bUY4Js@mJrCol6t(My(2#([%TH4i5t!wTMJ)U$3k^I9(;g5[6s-Fv+Lp14J:(=Bv}iq]n4}{/d]H(#?+.2Xh/gBL7C(}u}H}#tlIs3[0FccuwU7n1=T^%a[OEkdP]vLpgJ^A4X}qtL*{,Qpb5C#$cw+1Ed{-)M}QkC(BSOX.(wYXQJwUJ)_uACnBsL(x=w/[qYMW{86(ruV_DsJ;hYXfSkZQ$(^nXUm_oPB4AwAo@n*Y*@.{K#hSgdBI#L(QocjpW,E=vu@}9Vz4!f}DO/n6YOb:rw/=Rz-A${Tx1Dpg-VDy^EEdh3:yo]N5-:^PTS{Xm;JKE_;dz%S.D:c0fH}XpK85dcCsk08MgG[x7%9y(^sMTIab6e_:[SBhqXltuyw!T%57Sy_Q,BZL[FBa*-t.@^VAxg(Snss*sgZ+2bdYrN}7IQaR4dp-Hu0=r^rCWZx2PZ^mYOoOWXNT1XPpie-,WOaUh_^)nRN,kd^3c_r^[]PyZUqPHwH8*m]rd?m]rZUD5ag.yVRNbb9TFCIzDuOel]W$p]XOL?;Z!D#/E+reP7C$c0jXE2xpt?L)[reOQ=lypafahe%REW8=6i/R_2[1*O?jK$n!3M9$rMWO/V0giVa()b6v.GqWaIA5kwl%g-3=ayFq[Vh_HsT#,e_Gb]ilYWV]BzRS!ZtK?[UdU;BZOTE12%LE6=tpj.@sSJ]vo8?dEbDKPLvB#$25BXxV6a6R;S;d_%(E+)secyE2S}65s/#aMCq=.{S$5P0kpiqrh:A0F*I^#t@%Ku*zwaPr?-4N,.!Tk^xAn$}x2:jcEeVVROOh0}[aALWlML00</File>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>10346</ID>
      <Description>"Toggle Compact View"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

if not toggleCompactView then
    function toggleCompactView(sender, forceEnable)
        local isCompactMode = not (compactViewMenuItem.Caption == 'Compact View Mode')
        if forceEnable ~= nil then
            isCompactMode = not forceEnable
        end

        synchronize(function()
            compactViewMenuItem.Caption = isCompactMode and 'Compact View Mode' or 'Full View Mode'
            getMainForm().Splitter1.Visible = isCompactMode
            getMainForm().Panel4.Visible    = isCompactMode
            getMainForm().Panel5.Visible    = isCompactMode
        end)
    end
end

if not createCompactViewMenu then
    function createCompactViewMenu()
        if isCompactMenuCreated then return end

        synchronize(function()
            local mainMenu = getMainForm().Menu.Items
            compactViewMenuItem = createMenuItem(mainMenu)
            compactViewMenuItem.Caption = 'Compact View Mode'
            compactViewMenuItem.OnClick = toggleCompactView
            mainMenu.add(compactViewMenuItem)
        end)

        isCompactMenuCreated = true
    end
end

createCompactViewMenu()
toggleCompactView(nil, true)

[DISABLE]
{$lua}
if toggleCompactView then
    toggleCompactView(nil, false)
end
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>92</ID>
      <Description>"Set game window from "Window mode" to "borderless fullscreen""</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>95</ID>
          <Description>"For game in primary monitor only"</Description>
          <Color>8000FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>93</ID>
          <Description>"Notice: read me first"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
--NO_ACTIVATE
messageDialog([[
PowerShell execution policy needs to be set to RemoteSigned for scripts to run properly.
Please follow these steps to set the execution policy:

1. Open PowerShell.
2. Run the following command:
   Set-ExecutionPolicy RemoteSigned -Scope CurrentUser

After setting this, scripts will run as expected.
]], mtWarning, mbOK)

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10345</ID>
          <Description>"Powershell ver. 7"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$lua}
if syntaxcheck then return end
--NO_ACTIVATE
-- 設定檔名為變數
local psFileNameInCT = "a17_win2borderless.ps1"  -- 這是內嵌在 .CT 文件中的檔案名
local psFileName = os.getenv("TEMP") .. "\\temp_script.ps1"  -- 臨時保存的檔案名

-- 查找內嵌的 PowerShell 腳本
local pfile = findTableFile(psFileNameInCT)

if pfile == nil then
    messageDialog("Error: Could not find the embedded PowerShell script '" .. psFileNameInCT .. "'.", mtError, mbOK)
else
    -- 保存內嵌的 PowerShell 腳本到臨時文件
    pfile.saveToFile(psFileName)

    -- 執行 PowerShell 腳本
    os.execute('pwsh -ExecutionPolicy Bypass -File "' .. psFileName .. '"')
end



[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10344</ID>
          <Description>"Powershell ver. 5"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$lua}
if syntaxcheck then return end
--NO_ACTIVATE
-- 設定檔名為變數
local psFileNameInCT = "a17_win2borderless_psv5.ps1"  -- 這是內嵌在 .CT 文件中的檔案名
local psFileName = os.getenv("TEMP") .. "\\temp_script.ps1"  -- 臨時保存的檔案名

-- 查找內嵌的 PowerShell 腳本
local pfile = findTableFile(psFileNameInCT)

if pfile == nil then
    messageDialog("Error: Could not find the embedded PowerShell script '" .. psFileNameInCT .. "'.", mtError, mbOK)
else
    -- 保存內嵌的 PowerShell 腳本到臨時文件
    pfile.saveToFile(psFileName)

    -- 執行 PowerShell 腳本
    os.execute('powershell -ExecutionPolicy Bypass -File "' .. psFileName .. '"')
end


[DISABLE]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>

--[[
[ENABLE]
{$lua}
if syntaxcheck then return end
]]--
-- **デバッグモードの設定 (デフォルト: 無効)**
local debugMode = false

-- AOBScanModule関数
if not AOBScanModule then
    function AOBScanModule(moduleName, signature, scanOptions)
        local baseAddr = nil
        local maxAddr = 0
        local modList

        synchronize(function()
            modList = enumModules()
        end)

        for _, mod in ipairs(modList) do
            if string.lower(mod.Name) == string.lower(moduleName) then
                baseAddr = mod.Address
                maxAddr = baseAddr + mod.Size
                break
            end
        end

        if not baseAddr then
            if debugMode then print("❗ Error: Module " .. moduleName .. " not found!") end
            return nil
        end

        if debugMode then
            print(string.format("✔️ %s Base Address: 0x%X", moduleName, baseAddr))
            print(string.format("🔬 Scanning Range: 0x%X - 0x%X", baseAddr, maxAddr))
        end

        local ms = createMemScan()

        synchronize(function()
            ms.firstScan(
                soExactValue,
                vtByteArray,
                nil,
                signature,
                nil,
                baseAddr,
                maxAddr,
                scanOptions or "+X+R",
                fsmNotAligned,
                "1",
                true,
                true,
                false,
                false
            )
        end)

        ms.waitTillDone()

        local results = createFoundList(ms)
        results.initialize()

        local addr
        synchronize(function()
            if results.getCount() &gt; 0 then
                addr = results[0]
            end
        end)

        if addr then
            if debugMode then print("🔦 AOB found at: 0x" .. addr) end
        else
            if debugMode then print("💔 AOB not found in " .. moduleName) end
        end

        results.destroy()
        ms.destroy()
        return addr
    end
end

registerLuaFunctionHighlight('AOBScanModule')

--[[
test AOBScanModule()
local aob_addr_str = AOBScanModule("???.exe", "48 8B 05 ?? ?? ?? ?? 33 ED 48 8B 88", "+X+R")
if aob_addr_str then
    print("🔦 Final AOB Address: 0x" .. aob_addr_str)
else
    print("💔 AOB not found in ???.exe")
end
]]--

-- Lua scripts that table checkbox will not be checked with "NO_ACTIVATE" in comment/script body
if not onMemRecPostExecute then
    function onMemRecPostExecute(memoryrecord, newState, succeeded)
        if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
            synchronize(function()
                memoryrecord.disableWithoutExecute()
            end)
        end
    end
end

-- Memory record IDs now allowed to be 'locked'
IDs = {999999, 9999999}

-- Determine event trigger sequence
if not contains then
    function contains(table, val)
       for i = 1, #table do
          if table[i] == val then
             return true
          end
       end
       return false
    end
end

if not onMemRecPreExecute then
    function onMemRecPreExecute(memoryrecord, newstate)
        if contains(IDs, memoryrecord.ID) and newstate then
            synchronize(function()
                if not memoryrecord.OnActivate then
                    memoryrecord.OnActivate = function(memoryrecord, before, currentstate)
                        return false
                    end
                end
            end)
        end
    end
end

-- Utility Functions
-- Clear lua engine log
if not clearLuaLog then
    function clearLuaLog()
        synchronize(function()
          getLuaEngine().MenuItem5.doClick()
        end)
    end
end
registerLuaFunctionHighlight('clearLuaLog')

-- Close lua engine log
if not closeLuaEngine then
    function closeLuaEngine()
        synchronize(function()
          getLuaEngine().Close()
        end)
    end
end
registerLuaFunctionHighlight('closeLuaEngine')

-- Clear lua engine log &amp; close lua engine
if not closeLuaEngine2 then
    function closeLuaEngine2()
        synchronize(function()
          getLuaEngine().MenuItem5.doClick()
          getLuaEngine().Close()
        end)
    end
end
registerLuaFunctionHighlight('closeLuaEngine2')

if not getProcessNameFromPID then
	function getProcessNameFromPID(pid)
	  local sl = createStringList()
	  getProcessList(sl)
	  local hexPid = string.format("%X", pid):upper()

	  for i = 0, sl.Count - 1 do
		local entry = sl[i]
		local hexid, name = entry:match("^(%x+)%-(.+)$")
		if hexid and name then
		  if tonumber(hexid, 16) == pid then
			return name
		  end
		end
	  end
	  return "(unknown)"
	end
end
registerLuaFunctionHighlight('getProcessNameFromPID')

if not printProcessInfo then
	function printProcessInfo()
	  local pid = getOpenedProcessID()
	  local name = getProcessNameFromPID(pid)
	  print(string.format("📎 Attached to process: %s (PID: %d / 0x%X)", name, pid, pid))
	end
end
registerLuaFunctionHighlight('printProcessInfo')

if not dumpProcessListAndFindPID then
	function dumpProcessListAndFindPID()
	  local pid = getOpenedProcessID()
	  print(string.format("💭 Current PID: %d / 0x%X", pid, pid))

	  local sl = createStringList()
	  getProcessList(sl)

	  print("🧾 Dumping process list:")
	  for i = 0, sl.Count - 1 do
		local entry = sl[i]
		print(string.format("[%d] %s", i, entry))

		-- 嘗試解析並比對 PID
		local name, hexid = entry:match("(.+)%-(%x+)$")
		if name and hexid then
		  local parsed = tonumber(hexid, 16)
		  if parsed == pid then
			print("🔦 Match found in process list:")
			print(string.format("Name: %s | PID: %s (0x%s)", name, parsed, hexid))
		  end
		end
	  end
	end
end
registerLuaFunctionHighlight('dumpProcessListAndFindPID')

if not toHex32 then
	function toHex32(num)
		local hexstr = "0123456789ABCDEF"
		local result = ""
		if num &lt; 0 then
			num = (num + (1 &lt;&lt; 32)) % (1 &lt;&lt; 32) -- 轉成32-bit補數
		end
		for i = 1, 8 do -- 32-bit 一共8個hex位
			local n = num &amp; 0xF -- 取最低4 bit
			result = hexstr:sub(n + 1, n + 1) .. result
			num = num &gt;&gt; 4 -- 右移4 bit
		end
		return result
	end
end
registerLuaFunctionHighlight('toHex32')

if not toHex then
	function toHex(num)
		local hexstr = "0123456789ABCDEF"
		local result = ""
		if num &lt; 0 then
			num = (num + (1 &lt;&lt; 64)) % (1 &lt;&lt; 64)  -- 轉成64-bit補數
		end
		for i = 1, 16 do -- 每4 bit 一個 hex字，64-bit總共16個hex位
			local n = num &amp; 0xF -- 取最低4bit
			result = hexstr:sub(n + 1, n + 1) .. result
			num = num &gt;&gt; 4 -- 右移4bit
		end
		return result
	end
end	
registerLuaFunctionHighlight('toHex')

synchronize(function() AddressList.Header.OnSectionClick = nil end)
--[[
[DISABLE]
{$lua}

if AOBScanModule then
    AOBScanModule = nil
end
if onMemRecPostExecute then
    onMemRecPostExecute = nil
end
if onMemRecPreExecute then
    onMemRecPreExecute = nil
end
if clearLuaLog then
    clearLuaLog = nil
end
if closeLuaEngine then
    closeLuaEngine = nil
end
if closeLuaEngine2 then
    closeLuaEngine2 = nil
end
]]--
</LuaScript>
</CheatTable>
