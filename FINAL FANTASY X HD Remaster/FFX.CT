<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>5</ID>
      <Description>"inf. HP"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : FFX.exe
  Version: 
  Date   : 2023-06-11
  Author : bbfox@https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_INF_HP,FFX.exe,29 BE D0 05 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(i_hp_option)
label(vf_hp_damage_multi)

newmem:
  push eax
  mov eax, [esi+8]
  cmp eax, #12289
  je next0

  cmp eax, 9
  jae endp

next0:
  cmp dword ptr [i_hp_option], 1
  jne next1
full_hp:
  cmp edi, 0
  jl endp
  xor edi, edi
  jmp endp
next1:
  cmp dword ptr [i_hp_option], 2
  jne endp
  cmp edi, 0
  jl endp
  //movss xmm6, [vf_hp_damage_multi]
  //db c5 fa 10 35 64 00 9f 00
  movss xmm6, [vf_hp_damage_multi]
  cvtsi2ss xmm7, edi
  mulss xmm7, xmm6
  cvtss2si edi, xmm7

  db EB 3B 54
  db 68 69 73 20 74 61 62 6C 65
  db 20 63 6F 6D
  db 65 73 20 66 72 6F 6D 20
  db 68 74 74 70
  db 73 3A 2F 2F 6F 70 65 6E 63 68 65 61
  db 74 74 61 62
  db 6C 65
  db 73 2E
  db 63 6F 6D 20
  db 2F
  db 20
  db 43 45 20 37
  db 2E 34 2B

endp:
  pop eax

code:
  sub [esi+000005D0],edi
  jmp return
align 10 cc
  i_hp_option: // 1: full HP, 2: multiplier
  dd 1
  vf_hp_damage_multi:
  dd (float)0.75

INJECT_INF_HP:
  jmp newmem
  nop
return:
registersymbol(INJECT_INF_HP)
registersymbol(i_hp_option)
registersymbol(vf_hp_damage_multi)

[DISABLE]

INJECT_INF_HP:
  db 29 BE D0 05 00 00

unregistersymbol(INJECT_INF_HP)
unregistersymbol(i_hp_option)
unregistersymbol(vf_hp_damage_multi)

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: FFX.exe+38E3A9

FFX.exe+38E382: FF B6 D0 05 00 00  - push [esi+000005D0]
FFX.exe+38E388: E8 43 BD 00 00     - call FFX.exe+39A0D0
FFX.exe+38E38D: 83 C4 0C           - add esp,0C
FFX.exe+38E390: 89 86 D0 05 00 00  - mov [esi+000005D0],eax
FFX.exe+38E396: 53                 - push ebx
FFX.exe+38E397: E8 C4 F0 FF FF     - call FFX.exe+38D460
FFX.exe+38E39C: 83 C4 04           - add esp,04
FFX.exe+38E39F: 85 C0              - test eax,eax
FFX.exe+38E3A1: 74 22              - je FFX.exe+38E3C5
FFX.exe+38E3A3: FF B6 94 05 00 00  - push [esi+00000594]
// ---------- INJECTING HERE ----------
FFX.exe+38E3A9: 29 BE D0 05 00 00  - sub [esi+000005D0],edi
// ---------- DONE INJECTING  ----------
FFX.exe+38E3AF: 6A 00              - push 00
FFX.exe+38E3B1: FF B6 D0 05 00 00  - push [esi+000005D0]
FFX.exe+38E3B7: E8 14 BD 00 00     - call FFX.exe+39A0D0
FFX.exe+38E3BC: 83 C4 0C           - add esp,0C
FFX.exe+38E3BF: 89 86 D0 05 00 00  - mov [esi+000005D0],eax
FFX.exe+38E3C5: 5F                 - pop edi
FFX.exe+38E3C6: 5E                 - pop esi
FFX.exe+38E3C7: 5B                 - pop ebx
FFX.exe+38E3C8: 5D                 - pop ebp
FFX.exe+38E3C9: C3                 - ret 
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>25</ID>
          <Description>"HP option"</Description>
          <DropDownList DisplayValueAsItem="1">0:None
1:Full
2:by multiplier below
</DropDownList>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>C08000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>i_hp_option</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>26</ID>
          <Description>"Damage multiplier"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>C08000</Color>
          <VariableType>Float</VariableType>
          <Address>vf_hp_damage_multi</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"inf. item use"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : FFX.exe
  Version: 
  Date   : 2023-06-11
  Author : bbfox@https://opencheattables.com
}

[ENABLE]

//aobscanmodule(INJECT_BATTLE_INF_ITEM_USE,FFX.exe,8A 87 5C 0B 32 01) // should be unique
aobscanmodule(INJECT_BATTLE_INF_ITEM_USE,FFX.exe,8A 87 ?? ?? ?? ?? 84 C0 74 0B) // should be unique
alloc(newmem,$1000)

alloc(INJECT_BATTLE_INF_ITEM_USEo, 6)

label(code)
label(return)

INJECT_BATTLE_INF_ITEM_USEo:
  readmem(INJECT_BATTLE_INF_ITEM_USE, 6)

newmem:

code:
  //mov al,[edi+FFX.exe+D30B5C]
  //do not use reassemble() because of CE 7.5 reassemble bug in RAX/EAX register
  readmem(INJECT_BATTLE_INF_ITEM_USE, 6)
  //
  cmp al, #81
  jae endp
  mov al, #81

  //write back
  //mov [edi+FFX.exe+D30B5C], al
  //mov BYTE PTR [edi+0x????????], al
  //Disassembly: 88 87 ?? ?? ?? ??
  db 88 87
  readmem(INJECT_BATTLE_INF_ITEM_USE+2, 4)


endp:
  // inject end

  jmp return

INJECT_BATTLE_INF_ITEM_USE:
  jmp newmem
  nop
return:
registersymbol(INJECT_BATTLE_INF_ITEM_USE)
registersymbol(INJECT_BATTLE_INF_ITEM_USEo)
[DISABLE]

INJECT_BATTLE_INF_ITEM_USE:
  //db 8A 87 5C 0B 32 01
  readmem(INJECT_BATTLE_INF_ITEM_USEo, 6)

unregistersymbol(INJECT_BATTLE_INF_ITEM_USE)
dealloc(newmem)
unregistersymbol(INJECT_BATTLE_INF_ITEM_USEo)
dealloc(INJECT_BATTLE_INF_ITEM_USEo)
{
// ORIGINAL CODE - INJECTION POINT: FFX.exe+3905DE

FFX.exe+3905B9: 0F 85 EB 00 00 00        - jne FFX.exe+3906AA
FFX.exe+3905BF: 8B 5D 0C                 - mov ebx,[ebp+0C]
FFX.exe+3905C2: 85 DB                    - test ebx,ebx
FFX.exe+3905C4: 0F 84 E0 00 00 00        - je FFX.exe+3906AA
FFX.exe+3905CA: 33 FF                    - xor edi,edi
FFX.exe+3905CC: 8D 64 24 00              - lea esp,[esp+00]
FFX.exe+3905D0: 0F B7 0C 7D 5C 09 32 01  - movzx ecx,word ptr [edi*2+FFX.exe+D3095C]
FFX.exe+3905D8: 8B C1                    - mov eax,ecx
FFX.exe+3905DA: 3B D0                    - cmp edx,eax
FFX.exe+3905DC: 75 15                    - jne FFX.exe+3905F3
// ---------- INJECTING HERE ----------
FFX.exe+3905DE: 8A 87 5C 0B 32 01        - mov al,[edi+FFX.exe+D30B5C]
// ---------- DONE INJECTING  ----------
FFX.exe+3905E4: 84 C0                    - test al,al
FFX.exe+3905E6: 74 0B                    - je FFX.exe+3905F3
FFX.exe+3905E8: 85 DB                    - test ebx,ebx
FFX.exe+3905EA: 79 5A                    - jns FFX.exe+390646
FFX.exe+3905EC: 0F B6 C0                 - movzx eax,al
FFX.exe+3905EF: 03 C3                    - add eax,ebx
FFX.exe+3905F1: 79 53                    - jns FFX.exe+390646
FFX.exe+3905F3: 66 85 C9                 - test cx,cx
FFX.exe+3905F6: 74 09                    - je FFX.exe+390601
FFX.exe+3905F8: 80 BF 5C 0B 32 01 00     - cmp byte ptr [edi+FFX.exe+D30B5C],00
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"inf. S.LV after use"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : FFX.exe
  Version: 
  Date   : 2023-06-11
  Author : bbfox@https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_SLV_USE,FFX.exe,8A 8E ?? ?? ?? ?? 0F B6 C1 2B C2) // should be unique
alloc(newmem,$1000)

alloc(INJECT_SLV_USEo, 6)

label(code)
label(return)

INJECT_SLV_USEo:
  readmem(INJECT_SLV_USE, 6)

newmem:

code:
  //mov cl,[esi+FFX.exe+D32097]
  reassemble(INJECT_SLV_USE)

  pushf
  cmp cl, 1F
  jge endp
  mov cl, 1F

  db 88 8e
  readmem(INJECT_SLV_USE+2, 4)
  mov edx, 1
  mov [ebp+0C], edx

endp:
  popf


  jmp return

INJECT_SLV_USE:
  jmp newmem
  nop
return:
registersymbol(INJECT_SLV_USE)
registersymbol(INJECT_SLV_USEo)
[DISABLE]

INJECT_SLV_USE:
  //db 8A 8E 97 20 CE 01
  readmem(INJECT_SLV_USEo, 6)

unregistersymbol(INJECT_SLV_USE)
dealloc(newmem)
unregistersymbol(INJECT_SLV_USEo)
dealloc(INJECT_SLV_USEo)
{
// ORIGINAL CODE - INJECTION POINT: FFX.exe+386FC6

FFX.exe+386FAD: CC                    - int 3 
FFX.exe+386FAE: CC                    - int 3 
FFX.exe+386FAF: CC                    - int 3 
FFX.exe+386FB0: 55                    - push ebp
FFX.exe+386FB1: 8B EC                 - mov ebp,esp
FFX.exe+386FB3: 8B 55 0C              - mov edx,[ebp+0C]
FFX.exe+386FB6: 56                    - push esi
FFX.exe+386FB7: 8B 75 08              - mov esi,[ebp+08]
FFX.exe+386FBA: 81 E6 FF 00 00 00     - and esi,000000FF
FFX.exe+386FC0: 69 F6 94 00 00 00     - imul esi,esi,00000094
// ---------- INJECTING HERE ----------
FFX.exe+386FC6: 8A 8E 97 20 CE 01     - mov cl,[esi+FFX.exe+D32097]
// ---------- DONE INJECTING  ----------
FFX.exe+386FCC: 0F B6 C1              - movzx eax,cl
FFX.exe+386FCF: 2B C2                 - sub eax,edx
FFX.exe+386FD1: 78 29                 - js FFX.exe+386FFC
FFX.exe+386FD3: 0F B6 86 98 20 CE 01  - movzx eax,byte ptr [esi+FFX.exe+D32098]
FFX.exe+386FDA: 6A 65                 - push 65
FFX.exe+386FDC: 03 C2                 - add eax,edx
FFX.exe+386FDE: 2A CA                 - sub cl,dl
FFX.exe+386FE0: 6A 00                 - push 00
FFX.exe+386FE2: 50                    - push eax
FFX.exe+386FE3: 88 8E 97 20 CE 01     - mov [esi+FFX.exe+D32097],cl
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>28</ID>
      <Description>"inf. MP"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : FFX.exe
  Version: 
  Date   : 2023-06-11
  Author : bbfox@https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_INF_MP,FFX.exe,8B 96 D4 05 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  push eax
  mov eax, [esi+8]
  cmp eax, #12289
  je next0

  cmp eax, 9
  jae endp

next0:
  cmp ecx, 0
  jl endp
  xor ecx, ecx
  jmp endp

endp:
  pop eax

code:
  mov edx,[esi+000005D4]
  jmp return

INJECT_INF_MP:
  jmp newmem
  nop
return:
registersymbol(INJECT_INF_MP)

[DISABLE]

INJECT_INF_MP:
  db 8B 96 D4 05 00 00

unregistersymbol(INJECT_INF_MP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: FFX.exe+38E60A

FFX.exe+38E5EE: CC                    - int 3 
FFX.exe+38E5EF: CC                    - int 3 
FFX.exe+38E5F0: 55                    - push ebp
FFX.exe+38E5F1: 8B EC                 - mov ebp,esp
FFX.exe+38E5F3: 56                    - push esi
FFX.exe+38E5F4: FF 75 08              - push [ebp+08]
FFX.exe+38E5F7: E8 34 5A 00 00        - call FFX.exe+394030
FFX.exe+38E5FC: 8B F0                 - mov esi,eax
FFX.exe+38E5FE: 68 0F 27 00 00        - push 0000270F
FFX.exe+38E603: 0F B6 8E CC 06 00 00  - movzx ecx,byte ptr [esi+000006CC]
// ---------- INJECTING HERE ----------
FFX.exe+38E60A: 8B 96 D4 05 00 00     - mov edx,[esi+000005D4]
// ---------- DONE INJECTING  ----------
FFX.exe+38E610: 2B D1                 - sub edx,ecx
FFX.exe+38E612: 6A 00                 - push 00
FFX.exe+38E614: 52                    - push edx
FFX.exe+38E615: E8 B6 BA 00 00        - call FFX.exe+39A0D0
FFX.exe+38E61A: 0F B6 8E BC 05 00 00  - movzx ecx,byte ptr [esi+000005BC]
FFX.exe+38E621: 89 86 D4 05 00 00     - mov [esi+000005D4],eax
FFX.exe+38E627: 0F B6 86 BD 05 00 00  - movzx eax,byte ptr [esi+000005BD]
FFX.exe+38E62E: 50                    - push eax
FFX.exe+38E62F: 0F B6 86 CD 06 00 00  - movzx eax,byte ptr [esi+000006CD]
FFX.exe+38E636: 2B C8                 - sub ecx,eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"Fast OD when get hit"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">{ Game   : FFX.exe
  Version: 
  Date   : 2023-06-11
  Author : bbfox@https://opencheattables.com
}

[ENABLE]

aobscanmodule(INJECT_FAST_OD,FFX.exe,88 83 BC 05 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  pushf
  push edx
  mov edx, [ebx+8]
  cmp edx, 9
  pop edx
  jae endp

  cmp al, 64
  je endp
  mov al, 64

endp:
  popf

code:
  mov [ebx+000005BC],al
  jmp return

INJECT_FAST_OD:
  jmp newmem
  nop
return:
registersymbol(INJECT_FAST_OD)

[DISABLE]

INJECT_FAST_OD:
  db 88 83 BC 05 00 00

unregistersymbol(INJECT_FAST_OD)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: FFX.exe+3B16E0

FFX.exe+3B16BB: D9 9B 0C 07 00 00     - fstp dword ptr [ebx+0000070C]
FFX.exe+3B16C1: 0F B6 83 BD 05 00 00  - movzx eax,byte ptr [ebx+000005BD]
FFX.exe+3B16C8: 0F B6 B3 BC 05 00 00  - movzx esi,byte ptr [ebx+000005BC]
FFX.exe+3B16CF: 50                    - push eax
FFX.exe+3B16D0: 8D 04 3E              - lea eax,[esi+edi]
FFX.exe+3B16D3: 6A 00                 - push 00
FFX.exe+3B16D5: 50                    - push eax
FFX.exe+3B16D6: E8 F5 89 FE FF        - call FFX.exe+39A0D0
FFX.exe+3B16DB: 83 C4 0C              - add esp,0C
FFX.exe+3B16DE: 3B F0                 - cmp esi,eax
// ---------- INJECTING HERE ----------
FFX.exe+3B16E0: 88 83 BC 05 00 00     - mov [ebx+000005BC],al
// ---------- DONE INJECTING  ----------
FFX.exe+3B16E6: 5E                    - pop esi
FFX.exe+3B16E7: 7D 18                 - jnl FFX.exe+3B1701
FFX.exe+3B16E9: 0F B6 8B BD 05 00 00  - movzx ecx,byte ptr [ebx+000005BD]
FFX.exe+3B16F0: 3B C1                 - cmp eax,ecx
FFX.exe+3B16F2: 75 0D                 - jne FFX.exe+3B1701
FFX.exe+3B16F4: 6A 03                 - push 03
FFX.exe+3B16F6: FF 75 08              - push [ebp+08]
FFX.exe+3B16F9: E8 C2 43 FD FF        - call FFX.exe+385AC0
FFX.exe+3B16FE: 83 C4 08              - add esp,08
FFX.exe+3B1701: 8B C7                 - mov eax,edi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"Fast OD after attack"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : FFX.exe
  Version: 
  Date   : 2023-06-11
  Author : bbfox@https://opencheattabels.com
}

[ENABLE]

aobscanmodule(INJECT_FAST_OD2,FFX.exe,0F B6 8E BC 05 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  push eax
  mov eax, [esi+8]
  cmp eax, 9
  jae endp
  mov al, [esi+000005BC]
  cmp al, 64
  jae endp
  mov al, 64
  mov [esi+000005BC], al

endp:
  pop eax

code:
  movzx ecx,byte ptr [esi+000005BC]
  jmp return

INJECT_FAST_OD2:
  jmp newmem
  nop 2
return:
registersymbol(INJECT_FAST_OD2)

[DISABLE]

INJECT_FAST_OD2:
  db 0F B6 8E BC 05 00 00

unregistersymbol(INJECT_FAST_OD2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: FFX.exe+38E61A

FFX.exe+38E5F7: E8 34 5A 00 00        - call FFX.exe+394030
FFX.exe+38E5FC: 8B F0                 - mov esi,eax
FFX.exe+38E5FE: 68 0F 27 00 00        - push 0000270F
FFX.exe+38E603: 0F B6 8E CC 06 00 00  - movzx ecx,byte ptr [esi+000006CC]
INJECT_INF_MP: E9 F1 19 C4 FF        - jmp 00F80000
FFX.exe+38E60F: 90                    - nop 
FFX.exe+38E610: 2B D1                 - sub edx,ecx
FFX.exe+38E612: 6A 00                 - push 00
FFX.exe+38E614: 52                    - push edx
FFX.exe+38E615: E8 B6 BA 00 00        - call FFX.exe+39A0D0
// ---------- INJECTING HERE ----------
FFX.exe+38E61A: 0F B6 8E BC 05 00 00  - movzx ecx,byte ptr [esi+000005BC]
// ---------- DONE INJECTING  ----------
FFX.exe+38E621: 89 86 D4 05 00 00     - mov [esi+000005D4],eax
FFX.exe+38E627: 0F B6 86 BD 05 00 00  - movzx eax,byte ptr [esi+000005BD]
FFX.exe+38E62E: 50                    - push eax
FFX.exe+38E62F: 0F B6 86 CD 06 00 00  - movzx eax,byte ptr [esi+000006CD]
FFX.exe+38E636: 2B C8                 - sub ecx,eax
FFX.exe+38E638: 6A 00                 - push 00
FFX.exe+38E63A: 51                    - push ecx
FFX.exe+38E63B: E8 90 BA 00 00        - call FFX.exe+39A0D0
FFX.exe+38E640: 83 C4 1C              - add esp,1C
FFX.exe+38E643: 80 BE CD 06 00 00 00  - cmp byte ptr [esi+000006CD],00
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"S.LV"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"#1"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>FFX.exe+D32097</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"#2"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>FFX.exe+D3212B</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"#3"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>FFX.exe+D321BF</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"#4"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>FFX.exe+D32253</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"#5"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>FFX.exe+D322E7</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"#6"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>FFX.exe+D3237B</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"#7"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>FFX.exe+D3240F</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"#8"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>FFX.exe+D324A3</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"#9"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>FFX.exe+D32537</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Gil"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <Color>FF8080</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>FFX.exe+D307D8</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>32</ID>
      <Description>"(2023/06/27) FINAL FANTASY X HD Remaster  /  https://opencheattables.com  /  CE 7.5+"</Description>
      <Color>00B058</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>https://wiki.special-k.info/SpecialK/ReShade#final-fantasy-xx-2-hd-remaster
</Comments>
</CheatTable>
